{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p>Welcome to the Atanu MLKit Docs!</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install atanu-mlkit\n</code></pre>"},{"location":"dataset/custom_dataset/","title":"Custom Dataset","text":""},{"location":"dataset/custom_dataset/#dataset","title":"Dataset","text":"<pre><code>from torch.utils.data import Dataset\n\nclass CustomDataset(Dataset):\n    def __init__(self, inputs, labels):\n        self.inputs = inputs\n        self.labels = labels\n\n    def __len__(self):\n        return len(self.inputs)\n\n    def __getitem__(self, idx):\n        return self.inputs[idx], self.labels[idx]\n</code></pre>"},{"location":"dataset/custom_dataset/#datasplit","title":"DataSplit","text":"<pre><code>import torch.utils.data as data\n\ntrain_size = int(0.7 * len(dataset))\nval_size = int(0.15 * len(dataset))   \ntest_size = len(dataset) - train_size - val_size \n\ntrain_data, val_data, test_data = data.random_split(\n    dataset, \n    [train_size, val_size, test_size])\n</code></pre>"},{"location":"dataset/custom_dataset/#dataloader","title":"Dataloader","text":"<pre><code>from torch.utils.data import Dataset, DataLoader\n\ntrain_dataloader = DataLoader(training_data, batch_size=64, shuffle=True)\nval_dataloader = DataLoader(val_data, batch_size=64, shuffle=False)\ntest_dataloader = DataLoader(test_data, batch_size=64, shuffle=False)\n</code></pre>"},{"location":"models/unet/","title":"UNet","text":"<p>U-Net is a convolutional neural network (CNN) that's used for image segmentation, particularly in biomedical applications. </p>"},{"location":"models/unet/#import","title":"import","text":"<pre><code>from atanu_mlkit.models import UNET\n</code></pre> <pre><code>in_channels = 3 # Number of channels\nnum_classes = 5 # Number of classes\n\nmodel = UNet(in_channels, num_classes)\n</code></pre>"},{"location":"preprocessing/text_encoder/","title":"Text Encoder","text":"<p>Converts text into sequences for use with RNNs, LSTMs, and GRUs.</p>"},{"location":"preprocessing/text_encoder/#import","title":"Import","text":"<pre><code>from atanu_mlkit.preprocessing import TextEncoder\n</code></pre>"},{"location":"preprocessing/text_encoder/#basic-text-pre-processing","title":"Basic text pre-processing","text":"<pre><code>import re\ndef clean_text(text):\n    text = text.lower()  # Lowercase\n    text = re.sub(r'\\d+', '', text)  # Remove digits\n    text = re.sub(r'\\s+', ' ', text)  # Remove extra spaces\n    text = re.sub(r'[^\\w\\s]', '', text)  # Remove punctuation\n    return text\n</code></pre>"},{"location":"preprocessing/text_encoder/#convert-text-to-sequences","title":"Convert Text to Sequences","text":"<p><pre><code>text_encoder = TextEncoder(preprocessor=clean_text)\n\ntexts = ['I Love my Dog', 'You love Cat 7']\n\npadded_sequences = text_encoder.fit(texts)\nprint(\"Vocabulary:\", text_encoder.vocab)\nprint(\"Padded Sequences for Initial Texts:\", padded_sequences)\n</code></pre> output <pre><code>Vocabulary: {'&lt;unk&gt;': 0, '&lt;pad&gt;': 1, 'i': 2, 'love': 3, 'my': 4, 'dog': 5, 'you': 6, 'cat': 7}\nPadded Sequences for Initial Texts: tensor([[2, 3, 4, 5],\n        [6, 3, 7, 1]])\n</code></pre></p>"},{"location":"preprocessing/text_encoder/#convert-text-to-sequences-with-same-vocab","title":"Convert Text to Sequences with same vocab","text":"<p><pre><code>texts = ['I love my Cat', 'You love Pubg 8']\npadded_sequences = text_encoder.transform(texts)\nprint(\"Padded Sequences for Initial Texts:\", padded_sequences)\n</code></pre> output <pre><code>Padded Sequences for Initial Texts: tensor([[2, 3, 4, 7],\n        [6, 3, 0, 1]])\n</code></pre></p>"},{"location":"preprocessing/text_encoder/#convert-sequences-to-text","title":"Convert Sequences to Text","text":"<p><pre><code>sequences = [[2, 3, 6]]\nsequences_text = text_encoder.inverse_transform(sequences)\nprint(\"Sequence to Text:\", sequences_text)\n</code></pre> output <pre><code>Sequence to Text: ['i love you']\n</code></pre></p>"}]}